1.什么是JavaScript，有什么用？
     JavaScript是运行在浏览器上的脚本语言，简称JS。

2.在HTML中怎么嵌入JavaScript代码？
     第一种方式：直接在标签属性里面加事件句柄。
     第二种方式：设置脚本块，可以出现在html页面的任何位置，可以写多个，代码会遵循自上而下的顺序依次执行。
                    语法：<script type="text/javascript">JS代码</script>
     第三种方式：引入外部独立的JS文件，js文件中的代码会遵循自上而下的顺序依次执行。（推荐使用这种）	
                    语法：<script type="text/javascript" src="js文件路径"></script>


3.JS是一门事件驱动型的编程语言，依靠事件去驱动，然后执行对应的程序
  在JS中有很多事件，其中有一个事件叫做：鼠标单击(click)。并且任何事件都会
  对应一个事件句柄(onclick)。【事件和事件句柄的区别：事件句柄是在
  事件单词前添加一个on】，而事件句柄是以HTML标签的属性存在的。

4.JS中的字符串可以使用双引号，也可以使用单引号。

5.JS中的一条语句结束之后可以使用分号，也可以不用。

6.关于JS当中的变量
     声明变量语法：
              var 变量名;

     变量赋值语法：
              变量名=值;

     当一个变量没有手动赋值时，系统默认赋值undefined。
     javascript是一种弱类型语言，没有编译阶段，一个变量可以随意赋值。
     例如：var i=100;  //先赋一个整形
           i=false;    //改成boolean类型
	   i="abc";    //改成字符串类型
	   i=new Object();  //甚至可以改成引用类型

7.关于JS当中的函数
     JS中的函数等同于java语言中的方法，函数也是一段可以重复利用的代码片段。
     函数必须调用才能执行。
     函数一般都是可以完成某个特定功能的。
        语法：
	   第一种方式：
	   function 函数名(形式参数列表){
	      函数体;
	   }

	   第二种方式：
	   函数名=function(形式参数列表){
	       函数体;
	   }

	   例如：function sum(a,b){  //a和b都是变量名，变量名随意。
	             alert(a+b);
	         }
      注意：如果调用函数时传递的实参数量大于形参数量，那么实际有效的实参从左往右取直到满足形参的对应个数为止，
            如果形参数量大于实参数量，那么不足的实参用defined填充。
     
8.关于JS中函数的重名
     在JS中如果两个函数重名的话，后面定义的函数会将前面定义的函数覆盖掉。
     因此JS中函数的名字不能相同。

9.JS的局部变量和全局变量
     全局变量：
         在函数体之外声明的变量属于全局变量，全局变量的生命周期是：浏览器打开时声明，浏览器关闭时销毁，
	 尽量少用，因为全局变量会一直在浏览器内存中，耗费内存空间。全局变量的生命周期较长。

     局部变量：
         在函数体当中声明的变量属于局部变量，包括一个函数的形参都属于局部变量，
	 局部变量的生命周期是：函数开始执行时局部变量的内存空间开辟，函数执行结束之后，局部变量的内存空间释放。
	 局部变量的生命周期较短。

   注意：如果一个变量在声明的时候没有使用var关键字，那么无论这个变量是在哪里声明的，都是全局变量！

10.关于JS中的数据类型
      虽然JS中的变量声明的时候不需要指定数据类型，但是在赋值的时候，每一个数据还是有类型的。
        JS中数据类型有原始类型和引用类型。

11.typeof运算符
    JS中有一个运算符叫做typeof，这个运算符可以在程序的运行阶段动态获取变量的数据类型。
       语法：
          typeof 变量名

	 typeof运算结果：undefined,number,string,boolean,object,function

	 注意：在JS中比较字符串是否相等使用双等号。

12.Undefined类型
      Undefined类型只有一个值，这个值就是undefined。
      当一个变量没有手动赋值，系统会默认赋值undefined，或者可以给一个变量手动赋值undefined。

13.Number类型
      Number类型包括哪些值？
        整数，小数，正数，负数，NaN，Infinity，都属于Number类型。
     
     关于NaN：表示不是一个数字，但属于Number类型。
     什么情况下结果是NaN?
       运算结果本该是一个数字，最后算完却不是一个数字的时候，结果是NaN。
       例如： var a=100;
              var b="字符串";
	      alert(a/b);  //除号显示最终结果应该是一个数字，但运算结果实际上却不是一个数字，那么最后的结果为NaN。

     关于Infinity：表示无穷大。
       当除数为0的时候，结果为无穷大。
       例如：alert(10/0);

14.关于isNaN函数
     可以判断是否为数字。
       用法：isNaN(数据)，结果是true表示不是一个数字，结果是false表示是一个数字。

15.关于parseInt函数
     可以将字符串自动转化为数字，并且取整数位。
       用法：parseInt("数据")，返回一个数字。
     
16.关于parseFloat函数
     可以将字符串自动转化为数字。
       用法：parseFloat("数据")，返回一个数字。

17.关于Math.ceil函数
     可以向上取整。
       用法：Math.ceil("数据")，返回一个数字。

18.Boolean类型
      JS中的布尔类型只有两个值：true和false。
      在Boolean类型中有一个函数叫做：Boolean()。
         语法格式：
	     Boolean(数据);
           Boolean()函数的作用是将非布尔类型转化为布尔类型。
	   Boolean()函数的转化规律："有"就转化成true，"没有"就转化成false。

19.Null类型
       Null类型只有一个值，那就是null，但是注意：typeof null的运算结果为object，但null实际属于Null类型。

20.String类型
       1.在JS当中字符串可以使用单引号，也可以使用双引号。
       2.在JS当中，怎么创建字符串对象？
           第一种：var s="abc"; 
	   第二种(使用JS内置的支持类String)：var s=new String("abc");
	          需要注意的是：String是一个内置的类，可以直接用，String的父类是Object。
		  （第一种为小string，属于原始类型String；第二种为大String，属于Object类型）
       3.无论是小string还是大String，他们的属性和函数都是通用的。
       4.JS中字符串有length属性，用法：字符串名称.length
       具体的String方法看实例！
      
21.Object类型
       1.Object类型是所有类型的超类，自定义的类型默认继承为Object。
       2.Object类包括哪些属性？
           prototype属性（常用的）  作用是给类动态的扩展属性和函数
	   constructor属性
       3.在JS中定义的类默认继承Object，会继承Object类中所有的属性以及函数。  	  
	       
22.在JS中定义类
      语法：
         第一种方式：
	       function 类名(形参){
	       
	       }

         第二种方式：
	       类目=function(形参){
	       
	       }

      创建对象的语法：
          new 构造方法名(实参);  //构造方法名和类名一致

      在JS中，类的定义和构造函数的定义时放在一起来完成的。

      在类中创建函数语法：
           this.函数名=function(形参){
	      函数体;
	   }

      给类动态扩展实例函数：
            语法：
	       类名.prototype.扩展的函数名=function(形参){
	            函数体;
	       }

      给类动态扩展静态函数：
            语法：
	       类名.静态函数名=function(形参){
	            函数体;
	       }

23.全等运算符
       在JS中，"=="双等号只能判断值是否相等，而不能判断数据类型是否相等。
       在JS中，有一种运算符叫全等号：===(三个等号)
          该运算符需要值和数据类型都相等时，才返回true。

24.JS中的事件：

     焦点：
       1.blur 失去焦点
       2.focus 获得焦点

     单击/双击：
       1.click 单击鼠标
       2.dblclick 双击鼠标

     键盘：
       1.keydown 键盘按下
       2.keyup 键盘弹起
       
     鼠标：
       1.mousedown 鼠标按下
       2.mouseover 鼠标经过
       3.mousemove 鼠标移动
       4.mouseout 鼠标离开
       5.mouseup 鼠标弹起

     表单：
       1.reset 表单重置       
       2.submit 表单提交

       1.change 下拉列表选中项改变，或文本框内容改变
       2.select 文本被选中
       3.load 页面加载完成

    任何一个事件都会对应一个事件句柄，事件句柄是在事件前添加on。
    事件句柄出现在一个标签的属性位置上。（事件句柄以属性的形式存在）
    事件发生时浏览器会调用事件对应函数并传一个事件对象。

25.注册事件的两种方式
      第一种：
          直接在标签中使用事件句柄。
	  例如： <input type="button" value="hello" onclick=""/>
	
      第二种：
          使用纯JS代码完成事件的注册。
	  在script标签中获取元素对象，再对它使用事件句柄。
	  
	  具体看实例代码！

26.捕捉回车键/Esc键
      当使用onkeydown事件句柄时，如果不设置键值的话在按下键盘上任意一个键都会触发事件，
      这样显然时不合理的，因此我们需要在使用onkeydown时获取键值来设置按下特定某个键时才可触发事件。
      对于"键盘事件对象"来说，都有keyCode属性用来获取键值
      回车键键值：13
      Esc键键值：27
      
      具体看实例代码！

27.void运算符
      语法：
         void(表达式);   例如：void(0),表达式必须写。

      作用：执行void当中的表达式，但不返回任何结果。
         具体详情看实例！

28.JS中创建数组
      语法：var 数组名=[值,值,值,值,......];
      JS的数组中元素的类型随意，元素的个数随意。

    splice()方法：splice() 方法向数组中添加/删除项目，然后返回被删除的项目。
                  注释：该方法会改变原始数组。
		  语法：
                    arrayObject.splice(index,howmany,item1,.....,itemX)
		    参数	           描述
                    index	           必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。（就是需更改的数组下标）
                    howmany	           必需。要删除的项目数量。如果设置为 0，则不会删除项目。
                    item1, ..., itemX	   可选。向数组添加的新项目。

    push()方法：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。
                语法：
                    arrayObject.push(newelement1,newelement2,....,newelementX)

    shift()方法：shift()方法可以删除数组最前面的那个元素。

29.for...in语句(了解内容)
      JS特有的遍历数组和对象的语句
        用在数组方面的语法：
	   for(var 变量名 in 数组名){
	       
	   }   //其中变量名代表数组元素的下标
	   例如：
	     for(var i in arr){
	        alert(arr[i]);
	     }

        用在对象方面的语法：
	    for(var 变量名 in 对象引用){
	    
	    }  //其中变量名代表对象中所有的属性名且属性名用String类型表示

30.DOM和BOM的区别与联系
     BOM的顶级对象是：window
     DOM的顶级对象是：document

     实际上BOM是包括DOM的！

31.DOM编程案例
     看实例！

32.innerHTML和innerText
      相同点：都属于可以设置元素内部内容的属性。
      不同点：innerHTML中编写的内容会当作html代码解释并执行同时可以展示出html代码的效果，
              而innerText中就算放的是html代码也只会当作是普通字符串来看待。

      语法：元素对象.innerHTML="需设置的内容"   //内容可以写html代码，同时可以展示出所编写的html代码的效果
            元素对象.innerText="需设置的内容"   //内容怎么写都会当作普通字符串看待

	    具体看DOM编程案例中的实例！

33.正则表达式
    1.常用的正则表达式符号：
         .   匹配除换行符以外的任何字符
	 \w  匹配字母或数字或下划线或汉字
	 \s  匹配任意空白符
	 \d  匹配数字
	 \b  匹配单词的开始或结束
	 ^   匹配字符串的开始
	 $   匹配字符串的结束

	 *   重复零次或更多次
	 +   重复一次或更多次
	 ?   重复零次或一次
	 {n} 重复n次
	 {n,} 重复n次或更多次
	 {n,m} 重复n到m次

	 \W  匹配非字母或数字或下划线或汉字的字符
	 \S  匹配任意非空白符的字符
	 \D  匹配非数字的字符
	 \B  匹配不是单词开始或结束的位置
	 [^x]  匹配除x以外的任意字符
	 [^aeiou]  匹配除aeiou这几个字母以外的任意字符

	 |  表示或者
	 [A-Za-z0-9] 表示A-Z、a-z、0-9中的任意一个字符
	 [A-Za-z0-9-] 表示A-Z、a-z、0-9、-，以上所有字符中的任意一个字符
	 在正则表达式中小括号()的优先级较高
	 如果单纯的想表示"."这个字符，需要加"\"来转意,例如：\.

    2.简单的正则表达式例子：
	    QQ号的正则表达式：^[1-9][0-9]{4,}$
	        //其中^和$代表字符串的开始和结束符号
		//[1-9]代表1到9中任意一个数字(次数是1)
		//[0-9]{4,}代表0到9中任意一个数字，重复4次或更多次。

    3.在javascript中怎么创建正则表达式对象，怎么调用正则表达式对象的方法？
	    第一种创建方式:
	        var 变量名=/正则表达式/flags;
            
	    第二种创建方式：使用内置支持类RegExp
	        var 变量名=new RegExp("正则表达式","flags");

          关于flags：
	      falgs属性可以不写。
	      flags为3个可选项：
	                   g：全局匹配
			   i：忽略大小写
			   m：多行搜索(ES规范制定之后才支持m，且m不能用在正则表达式后面)只有前面是普通字符串时，m才可以使用

             正则表达式对象的test()方法：
	          用法：
		     正则表达式对象.test(用户填写的字符串);
		       该方法返回true或false。
		       如果返回true则表示字符串格式匹配成功，false则表示失败。

    4.实例演练
         看DOM编程案例中的实例！
	 
34.trim方法
       作用：去除字符串的前后空白同时返回一个新的字符串
       语法：
          var 变量名="字符串".trim();

        注意：由于某些低版本的浏览器不支持trim方法，因此可以自己给String类添加一个trim方法，
	      用法和正常的trim方法一样，具体看DOM编程案例中的实例！

35.（！重点）表单验证
        看DOM编程案例中的实例！

36.复选框的全选与取消全选
        看DOM编程案例中的实例！

37.获取下拉列表选中项的value
        看DOM编程案例中的实例！

38.显示网页时钟
       只用JS中内置的支持类：Date
       可以用来获取时间/日期

       获取系统当前时间：
           //直接new时间对象然后输出即可
           var sj=new Date();
           document.write(sj);  

       具体看DOM编程案例中的实例！

39.setInterval函数/clearInterval函数
     setInterval函数：
       属于内置对象window的函数，可直接调用；
       作用：可以设置每隔一段时间自动调用一次设定的函数。
       （该方法会返回一个值！该值可以传递给clearInterval函数）
       语法：
           window.setInterval("函数",间隔的毫秒数);
	   例：window.setInterval("display()",1000);  //每隔1000毫秒自动调用一次display函数

     clearInterval函数：
       属于内置对象window的函数，可直接调用；
       作用：可以停止setInterval函数的周期性计划！(通过setInterval函数返回的值)
       语法：
          window.clearInterval(返回的值);
	  例如：v=window.setInterval("displayTime()",1000);
	        window.clearInterval(v);

       具体看DOM编程案例中的实例！

40.JS内置支持类Array
     JS中创建数组有两种方式
     第一种：
         直接用var来定义一个数组变量创建数组
	 例：var arr=[1,2,3,false,"abc",3.14];  //注意使用中括号

     第二种：
         使用Array类来创建数组对象
	 例：var arr=new Array(3); //如果括号中写一个数字的话，3表示数组长度，如果不写则数组长度为0
	 例：var arr=new Array(3,4);  //如果括号中写具体的元素的话，那么代表3和2是这个数组中具体存储的元素，该数组长度为2

     JS中数组的内中函数：
         具体参见数组案例！

41.BOM编程
     1.在BOM编程中，window对象是顶级对象，代表浏览器窗口
     2.window有open和close等方法，可以开启窗口和关闭窗口。

     具体看BOM编程案例中的实例！

42.JSON（重点）
     1.什么是JSON，有什么用？
          Javascript Object Notation  简称JSON。（数据交换格式）
          JSON主要的作用是进行数据交换；一种标准的数据交换格式。（目前非常流行，90%以上的系统，系统A与系统B交换数据的话，都是采用JSON）

     2.JSON是一种标准的轻量级的数据交换格式。特点是：
          体积小、易解析。

     3.在实际开发中有两种数据交换格式，使用最多，其一是JSON，另一张是XML。
          XML体积较大，解析麻烦，但是其优点是：语法严谨。（通常银行相关的系统会使用XML）

     4.具体实例演示：看实例！

     5.JSON的语法格式：
           var jsonObj={
	        "属性名":"属性值",
		"属性名":"属性值",
		"属性名":"属性值",
		"属性名":"属性值",
		....
	   };

       JSON数组语法格式：
           var students=[
		{"属性名":"属性值","属性名":"属性值","属性名":"属性值"},
		{"属性名":"属性值","属性名":"属性值","属性名":"属性值"},
		{"属性名":"属性值","属性名":"属性值","属性名":"属性值"},
		....
		        ];

43.eval函数
       eval函数的作用是：
            将字符串当作一段JS代码解释并执行。
       语法：
           window.eval("JS代码");

       java连接数据库，查询数据之后，将数据在java程序中拼接成JSON格式的字符串，将”JSON格式的字符串“响应到浏览器，
       也就是说java响应到浏览器上的仅仅是一个“JSON格式的字符串”，还不是一个JSON对象
       可以使用eval函数，将JSON格式的字符串转换成JSON对象。

       具体看实例！

44.在JS当中，[]和{}有什么区别？
       []是数组。
       {}是JSON。

45.apply方法和call方法
      作用：都可以将方法内部的this修改为自定义对象
      用法：
         方法名.call(obj,1,2,3,...,n);
         方法名.apply(obj,[数组]);

	 obj为自定义对象，必传
	 1,2,3,...,n为call方法给被修改的方法传递的形参，非必传
	 [数组]为apply方法给被修改的方法传递的形参，非必传（将数组中的元素依次取出当作形参传入）

46.真数组转伪数组/伪数组转真数组
      真数组转伪数组：[].push.apply(obj,arr);  //obj为伪数组对象,arr为真数组
      伪数组转真数组：[].slice.call(obj);  //obj为伪数组对象

47.元素的克隆
      方法:cloneNode(true/false);
      参数：true或false
            如果传true，表示连同元素的内容一起克隆
	    如果传false，表示只克隆元素，不克隆元素的内容
      语法：对象.cloneNode(true/false);

48.insertBefore方法
      语法：
           调用者.insertBefore(插入的元素,参考的元素);
	   insertBefore方法：调用者是谁就会将元素插入到谁的里面

	   例如：value.insertBefore(v,value.firstChild);   //将v元素添加到 value元素中的第一个子元素 的前面

49.insertAdjacentHTML方法
      作用：给指定元素在指定位置添加一个字符串，该字符串可以是代码片段。
      语法：element.insertAdjacentHTML(position, text); 
                position 是相对于 element 元素的位置，位置参数如下：

                beforebegin：在 element 元素的前面。（同级）
                afterbegin：在 element 元素的第一个子节点前面。（子级）
                beforeend：在 element 元素的最后一个子节点后面。 （子级）
                afterend：在 element 元素的后面。（同级）

		例如：var str = '<p>这是一段文字</p>';
                      document.getElementById("message").insertAdjacentHTML('beforeend', str);

		      1
50.setAttribute方法和getAttribute方法
       setAttribute:
         作用：setAttribute() 方法添加指定的属性，并为其赋指定的值。
               如果这个指定的属性已存在，则仅设置/更改值。

           语法：
             element.setAttribute(key,value)
             参数
             参数       类型	  描述
             key	String	  必需。您希望添加的属性的名称。
             value	String	  必需。您希望添加的属性值。

       getAttribute:
         作用：getAttribute() 方法返回指定属性名的属性值。

         提示：如果您希望以 Attr 对象返回属性，请使用 getAttributeNode。

	 语法：
	    element.getAttribute(key)
	     参数	类型	        描述
             key	字符串值。	必需。需要获得属性值的属性名称。

51.split方法
      作用：split() 方法用于把一个字符串分割成字符串数组。
      语法：
         stringObject.split(separator,howmany)
         参数	        描述
         separator	必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。
         howmany	可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。
                        如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。

      返回值：一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 separator 自身。
              但是，如果 separator 是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）。
