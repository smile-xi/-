1.完成一个java项目，需要做哪些工作？
	1.分析项目要做什么，知道项目有哪些组成部分。
	2.设计项目，通过哪些步骤，使用哪些技术，需要多少人，多长的时间。
	3.组建团队，招人，购置设备，服务器，软件，笔记本。
	4.开发人员写代码，开发人员需要测试自己写的代码。
	5.测试人员测试项目的功能是否符合要求。
	   测试开发人员提交的代码--如果测试有问题--需要开发人员修改--再提交代码给测试人员--测试人员再测试代码
	   第五步中重复的人力测试需要浪费过多的时间，而使用Maven，可以解决时间浪费的问题。

2.想要改进项目的开发和管理，需要Maven。（Maven的优点）
	- maven可以管理jar文件
	- maven可以自动下载jar和他的文档、源代码
	- maven可以管理jar与jar之间的依赖，例如：a.jar需要b.jar，那么maven会自动下载b.jar。
	- maven可以管理需要的jar的版本
	- maven可以帮你编译程序，把java编译为class
	- maven可以帮你测试你的代码是否正确
	- maven可以帮你打包文件，形成jar文件或者war文件
	- maven可以帮你部署项目

3.构建：项目的构建
	构建是面向过程的，就是一些步骤，完成项目代码的编译，测试，运行，打包，部署等等。
	maven支持的构建包括有：
		1.清理，把之前项目编译的东西删除掉，为新的编译代码做准备。
		2.编译，把程序源代码编译为可执行代码（例如java文件编译为class文件），
			编译是批量的，maven可以同时把成千上百的文件编译为class。
		3.测试，maven可以执行测试程序代码，验证你的功能是否正确，
			测试是批量的，maven可以同时执行多个测试代码，同时测试很多功能。
		4.报告，生产测试结果的文件。
		5.打包，把你项目中所有的class文件，配置文件等所有资源放到一个压缩文件中。
			这个压缩文件就是项目的结果文件，通常java程序，压缩文件是.jar扩展名的。
			对于web应用，压缩文件扩展名是.war。
		6.安装，把打包后生成文件jar、war安装到本机仓库。
		7.部署，把程序安装好可以执行。

4.maven的核心概念：
	1.POM
		- 一个文件，名称是pom.xml，pom翻译过来叫做项目对象模型。
		  maven把一个项目当作一个模型使用。控制maven构建项目的过程，管理jar依赖。

	2.约定的目录结构
		- maven项目的目录和文件的位置都是规定的。

	3.坐标
		- 是一个唯一的字符串，用来表示资源的。

	4.依赖管理
		- 管理项目中可以使用的jar文件。

	5.仓库管理
		- 资源存放的位置。

	6.生命周期
		- maven工具构建项目的过程，就是生命周期。

	7.插件和目标
		- 执行maven构建的时候用的工具是插件。
	8.继承
	9.聚合

5.配置maven的环境变量
	在系统的环境变量中，指定一个M2_HOME的名称，指定它的值是maven工具的安装目录，bin之前的目录。
	例如：M2_HOME=E:\笔记\Maven\maven3.3.9\apache-maven-3.3.9

	再把M2_HOME加入到path之中，在所有路径之前加入 %M2_HOME%\bin;

	验证maven是否配置成功：
		在新的命令行中执行：mvn -v
		注意：需要配置JAVA_HOME，指定jdk路径

		出现如下内容，则maven安装、配置成功：
		C:\Users\Administrator>mvn -v
		Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)
		Maven home: E:\Maven\maven3.3.9\apache-maven-3.3.9
		Java version: 1.8.0_152, vendor: Oracle Corporation
		Java home: E:\jdk 1.8\jdk1.8 install\jre
		Default locale: zh_CN, platform encoding: GBK
		OS name: "windows 10", version: "10.0", arch: "amd64", family: "dos"

6.maven约定的目录结构，约定是大家都遵循的一个规则。（实例）
	每一个maven项目在磁盘中都是一个文件夹
	例如：一个叫做Hello的项目，以下为maven项目的目录结构：
		Hello/
		  ---/src
		  ---/src/main			放置你的主程序java代码和配置文件
		  ---/src/main/java		放置你的程序包和包中的java文件
		  ---/src/main/resources	放置你的java程序中要使用的配置文件

		  ---/src/test			放置测试程序代码和文件（可以没有）
		  ---/src/test/java		放置测试程序包和包中的java文件
		  ---/src/test/resources	放置测试java程序中要使用的配置文件

		  ---/pom.xml   maven的核心文件（maven项目必须有）

		  E:\笔记\MAVEN\Hello
				└─src
				    ├─main
				    │  ├─java
				    │  └─resources
				    └─test
					├─java
					└─resources

7."mvn compile" 命令可以编译src/main目录下的所有java文件。
	提出疑问：
		1.为什么要下载？
			maven工具执行的操作需要很多插件（jar文件）来完成。
		2.下载什么东西了？
			jar文件----叫做插件，用来完成某些功能的。
		3.下载的东西存放到哪里了？
			默认仓库（本机仓库）：
			C:\Users\Administrator\.m2\repository
	
	执行"mvn compile",结果是在项目的根目录下会生成target目录（结果目录），
	maven编译的java程序，最后的class文件都放在target目录中

8.设置本机存放资源的目录位置：
	1.修改maven的配置文件，maven安装目录/conf/settings.xml
	  先备份settings.xml

	2.修改 <localRepository> 指定你的目录（不要使用中文目录）
		本机指定的是<localRepository>E:/Maven/maven_repository</localRepository>

9.仓库
	1.仓库是什么？
		仓库是存放maven使用的插件（各种jar）和我们项目使用的jar（第三方的工具，如mysql驱动）

	2.仓库的分类
		本地仓库：个人计算机上的一个文件夹，存放各种jar
		远程仓库：在互联网上，使用网络才能使用的仓库。
			远程仓库中分有以下仓库：
				1.中央仓库：最权威的，世界上所有的开发人员都共享使用的一个集中的仓库。
					https://repo.maven.apache.org :中央仓库的地址
				2.中央仓库的镜像：就是中央仓库的备份，在各大洲，重要的城市都有镜像。
				3.私服：在公司的内部，在局域网中使用，不是对外使用的。

	3.仓库的使用
		maven仓库的使用不需要人为参与，仓库的使用如下：
			开发人员需要使用mysql驱动--->maven首先查本地仓库---如果本地仓库没有则去私服中寻找，如果找到则把资源下载到本地仓库
									---如果私服中没有则去中央仓库的镜像中寻找，如果找到则把资源下载到私服
									---如果镜像中没有则去中央仓库中寻找

10.pom：项目对象模型，是一个pom.xml文件
	1.pom.xml是Maven的灵魂，所有的操作都是关于pom.xml的。
	2.认识pom.xml：
		modelVersion：Maven模型的版本，对于Maven2和Maven3来说，它只能是4.0。
		groupId：组织Id，一般是公司域名的倒写，格式可以为：
				1.域名倒写。例如：com.baidu
				2.域名倒写+项目名。例如：com.baidu.Hello
		artifactId：项目名称，也是模块名称。
		version：项目的版本号。如果项目还在开发中，是不稳定版本，通常在版本后带-SNAPSHOT
				version使用三位数字标识，例如：1.1.0
		packaging：项目打包后的扩展名，可以是jar、war、rar、ear、pom，默认是jar。

	3.坐标：groupId、artifactId、version三个结合起来代表坐标，坐标是在互联网中唯一标识一个项目的。
		例如：
			<groupId>com.bjpowernode</groupId>
			<artifactId>ch01-maven</artifactId>
			<version>1.0-SNAPSHOT</version>

	4.maven搜索使用的中央仓库：www.mvnrepository.com

	5.依赖
		dependencies和dependency，相当于是java代码中的import。
		依赖指的就是项目中要使用的各种资源说明。

	6.properties:设置属性。

	7.build：maven在进行项目的构建时使用的配置信息，例如指定编译java代码使用的jdk版本等。


11.Maven的命令
	mvn clean：清理（会删除原来编译和测试的目录，即target目录，但是已经install到仓库里的包不会删除）
	mvn compile：编译主程序
	mvn test-compile：编译测试程序
	mvn test：测试（会生成一个目录surefire-reports，保存测试结果）
	mvn package：打包主程序（会编译、编译测试、测试，并且按照pom.xml的配置把主程序打包生成jar或war）
	mvn install：安装主程序（会把本工程打包，并且按照本工程的坐标保存到本地仓库中）
	mvn deploy：部署主程序（会把本工程打包，按照本工程的坐标保存到本地库中，并且还会保存到私服中，还会自动把项目部署到web容器中）

12.Maven的生命周期
	就是maven构建项目的过程：清理，编译，测试，报告，打包，安装，部署。

13.Maven的插件
	maven命令执行时，真正完成功能的是插件，插件就是一些jar文件。

14.单元测试（测试方法）：
	用的是Junit，Junit是一个专门测试的框架（工具）
	Junit测试的内容：测试的是类中的方法，每一个方法都是独立测试的。
			 方法是测试的基本单位（单元）。
	
	maven借助单元测试，批量的测试类中的大量方法是否符合预期的。

	使用步骤：
		1.加入依赖，在pom.xml文件中加入单元测试依赖
			<!-- 单元测试的依赖-->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.11</version>
				<scope>test</scope>
			</dependency>

		2.在maven项目中的src/test/java目录下，创建测试程序。
			注意：测试方法的定义规则是
				1.方法必须是public的
				2.方法不能有返回值
				3.方法名称推荐是自定义的
				4.方法的上面加入 @Test

15.打包
	命令：mvn package
	打包只生成src/main目录下的所有内容。

16.安装
	命令：mvn install
	作用：把打包后的文件安装到本地仓库中。这样其他项目就可以使用这个文件了。

17.在Idea中设置maven（重点）
	1.idea中内置了maven，但一般不使用内置maven，因为用内置maven想修改设置不方便。
	  使用自己安装的maven，需要覆盖idea中的默认的设置。让idea知道mave安装位置等信息。

	  配置的入口：
		1.配置当前工程的设置：file--Settings--Build,Excution,Deployment--Build Tools--Maven
		2.配置以后新建工程的设置：file-New Projects Settings--Settings for New Projects--Build,Excution,Deployment--Build Tools--Maven

	2.使用模板创建项目
		maven-archetype-quickstart：普通的java项目模板
		maven-archetype-webapp：web工程

18.依赖的范围
	- 使用<scope>表示依赖使用的范围，也就是在maven构建项目的哪些阶段起作用。
		scope的值有 compile、test、provided，默认是compile。
		maven构建项目的阶段：清理、编译、测试、打包、安装、部署
		范围为compile：该依赖在所有阶段都起效。
		范围为test：该依赖只在测试阶段起效。
		范围为provided：该依赖在编译和测试阶段起效。

					compile		test		provided
		对主程序是否起效	是		否		是
		对测试程序是否起效	是		是		是
		是否参与打包		是		否		否
		是否参与部署		是		否		否

19.maven常用操作
	1.maven的属性设置
		<properties> 设置maven的常用属性

	2.maven的全局变量
		自定义属性：
			第一步：在<properties> 中通过自定义标签声明变量（标签名就是变量名）。
			第二步：在pom.xml文件中的其他位置，使用${标签名}使用变量的值。
		
		自定义全局变量一般是定义 依赖的版本号，当你的项目中要使用多个相同的版本号，
		先使用全局变量定义，再使用${变量名}。
		例：
			//自定义全局变量：spring.version
			<properties>
				<spring.version>4.3.0</spring.version>
			</properties>

			//在依赖中使用该变量
			<dependencies>
				<dependency>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
					<version>${spring.version}</version>
				</dependency>
			</dependencies>
		
	3.资源插件
		- 默认没有在pom.xml中使用<resources>的时候，maven执行编译代码是，会把src/main/resources 目录中的文件拷贝
		  到target/classes 目录中。对于 src/main/java 目录下的非java文件不处理、不拷贝到target/classes 目录中。

		- 如果我们的程序需要把一些文件放在src/main/java目录中，当我们执行java程序时，需要用到src/main/java目录中的非java文件，
		  那么我们需要告诉maven在编译src/main/java目录下的程序时，把该目录下的非java文件也拷贝到target/classes目录中，
		  此时就需要在<build>中加入<resources>。
		  例如：
			<build>
				<resources>
					<resource>
						<directory>src/main/java</directory> //需处理文件所在的目录
						<includes>
							<include>**/*.properties</include>  //目录中所有的.properties文件都会被扫描到
							<include>**/*.xml</include>  //目录中所有的.xml文件都会被扫描到
						</includes>
						<filtering>false</filtering>  //filtering为过滤器，*.properties已经起到过滤效果了，因此不需要
					</resource>
				</resources>
			<build>
