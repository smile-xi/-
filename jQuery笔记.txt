1.如何导入jQuery？
    两种方式
       第一种：
           去官网下载jQuery的文件，然后再使用导入外部JS文件的方式导入。
	   例：<script src="jQuery文件地址"></script>

       第二种：
           直接导入压缩版引用地址
	   百度压缩版引用地址:
	         <script src="https://libs.baidu.com/jquery/1.11.3/jquery.min.js"></script>
		 以上的引用地址只是其中之一，还有其他地址可以百度上找。
     具体看实例！   

2.jQuery入口函数：
     类似普通JS代码中的window.onload=function(){}。
     语法：
       第一种写法：
         $(document).ready(function(){
              alert("第一种写法");  
         });

       第二种写法：
         jQuery(document).ready(function(){
              alert("第二种写法");
         });
       
       第三种写法：
         $(function(){
            alert("第三种写法");
        });

       第四种写法：
          详情见实例！


      原生JS和jQuery入口函数的区别：
           1.原生JS会等到DOM元素加载完毕，并且图片也加载完毕才会执行；
             jQuery会等到DOM元素加载完毕，但不会等到图片也加载完毕就会执行。

	   2.原生的JS如果编写了多个入口函数，后面编写的会覆盖前面编写的；
	     jQuery中编写多个入口函数，后面的不会覆盖前面的。

3.jQuery的冲突问题
      当别的框架中也有$符号的时候呢？
        此时该框架的$符号会和jQuery的$符号发生冲突问题！
     
     具体解决方法看实例！

4.jQuery的核心函数
      $(); 就代表了jQuery的核心函数。
      作用：
         1.接收一个函数
	 2.接收一个字符串
	      2.1接收一个选择器
	      2.2接收一个代码片段
         3.接收一个DOM元素

      具体看实例！

5.jQuery对象
      什么是jQuery对象？
        jQuery对象是一个伪数组

      什么是伪数组？
        有0到length-1的属性，并且有length属性。

6.jQuery的静态方法
     each()方法：遍历数组，具体看实例！
     map()方法：遍历数组，具体看实例！

     jQuery中each静态方法和map静态方法的区别：
              each静态方法默认的返回值是：遍历谁就返回谁
              map静态方法默认的返回值是：一个空的数组

              each静态方法不支持在回调函数中对遍历的数组进行处理
              map方法可以在回调函数中通过return对遍历的数组进行处理，然后生成一个新的数组返回

     trim()方法：去除字符串前后空白符，具体看实例。
     isWindow()方法：判断传入的对象是否是window对象，具体看实例。
     isArray()方法：判断传入的对象是否是一个真数组，具体看实例。
     isFunction()方法：判断传入的对象是否是一个函数，具体看实例。

     holdReady()方法：
           作用：控制jQuery的入口函数是否执行
	   语法：$.holdReady(true/false);
	          true代表暂停入口函数执行，false代表恢复入口函数的执行。
           具体用法：看实例！

     type()方法：
          语法：$.type(值);
	  作用：和原生JS的typeof一样

7.内容选择器
      :empty
      :parent
      :contains
      :has

      具体见实例！

8.属性和属性节点
     什么是属性：
         对象身上保存的变量就是属性。

     什么是属性节点：
         在编写HTML代码时，在HTML标签中添加的属性就是属性节点。
	 例如：<span name="it"></span>  //其中，name就是属性节点。

     如何从浏览器查看DOM元素的属性和属性节点：
         在浏览器中找到DOM元素之后，展开看到的都是属性，在attributes属性中保存的所有内容都是属性节点。

     如何设置和获取属性节点的值：
         设置：
	    DOM元素对象.setAttribute("属性节点名","想设置的值");
         获取：
	    DOM元素对象.getAttribute("属性节点名");

     属性与属性节点的区别：任何对象都有属性，只有DOM对象才有属性节点。

9.操作属性节点的方法
     1.attr(name,val)
       作用：获取或者设置属性节点的值
       可以传递一个参数，也可以传递两个参数
       如果传递一个参数，代表获取属性节点的值
       如果传递两个参数，代表设置属性节点的值

       注意点：
          如果是获取：无论找到多少个元素，都只会返回第一个元素指定的属性节点的值。
          如果是设置：找到多少个元素，就会设置多少个元素。如果设置的属性节点不存在，那么系统会自动新增。

     2.removeAttr(name)
       作用：删除属性节点。

       注意点：
          会删除所有找到元素指定的属性节点

10.操作属性的方法（看实例）
     1.prop()
     作用：获取或者设置属性的值

     2.removeProp()
     作用：删除属性。

     用法：二者的用法都和上面操作属性节点方法的用法一样

     注意点：prop方法不仅能够操控属性，还可以操控属性节点。

11.操作类的方法（看实例）
     1.addClass()
     作用：给元素添加类。
     例如： $("div").addClass("class1 class2");  //如果需要添加多个类，只需要类名与类名之间用空格隔开即可

     2.removeClass()
     作用：给元素删除类
     例如：$("div").removeClass("class1 class2"); //如果需要删除多个类，只需要类名与类名之间用空格隔开即可

     3.toggleClass()
     作用：给元素的类属性做添加或删除，如果该类已存在则删除，如果该类不存在则添加
     例如：$("div").toggleClass("class1 class2"); //如果该类已存在则删除，如果该类不存在则添加（切换多个类只需要类名之间用空格隔开）

     4.hasClass()
     作用：判断元素中是否包含某个类，包含就返回true，不包含就返回false
     注意点：1.传递参数：只要调用者其中一个包含指定类就返回true，否则返回false
             2.没有传递参数：返回false
     例如：$("div").hasClass("class1")

12.文本值相关的方法（看实例）
     1.html(参数)
     作用：和原生JS中的innerHTML一摸一样。
     注意点：传入参数为设置html，不传入参数为获取已有的html。

     2.text(参数)
     作用：和原生JS中的innerText一摸一样。
     注意点：传入参数为设置text，不传入参数为获取已有的text。

     3.val()
     作用：和value属性差不多。
     例如：$("input").val("我是value");  //设置value
     注意点：传入参数为设置value，不传入参数为获取已有的value。

13.jQuery操作css样式的方法（实例）
     设置css样式：
         语法：
           元素对象.css(样式);
	   //具体见实例
    
         第一种：逐个设置

         第二种：链式设置

         第三种：批量设置
       
     获取css样式值：
          语法：
	     元素对象.css("样式属性名");
	     例如：$("div").eq(0).css("widith");

14.jQuery操作位置和尺寸的方法（实例）
    1.width()   //获取或设置元素的宽度

    2.offset()   //获取或设置元素距离窗口的偏移位

    3.position()   //获取元素距离定位元素的偏移位

15.scrollTop方法（实例）
    作用：scrollTop用来获取或设置元素滚动的偏移位，也可以用来获取和设置网页滚动的偏移位

    获取：
      例：$(".scroll").scrollTop()  //获取元素滚动的偏移位

    设置：
      例：$(".scroll").scrollTop("300");  //设置元素滚动的偏移位为300

16.jQuery的事件绑定（实例）
      jQuery中有两种绑定事件的方式
        第一种：
	   事件名(fn);
	   例如：$("button").click(function(){
                     alert("hello");
                 });

        第二种：
	   on(事件名,fn);
	   例如：$("button").on("click",function(){
	              alert("hello");
	         });

        区别：第一种编码效率比第二种高，但是第一种有部分事件不能添加，而第二种所有事件都可以添加。
	注意点：两种都可以添加多个相同或不同类型的事件，不会覆盖

17.jquery的事件解绑（实例）
     方法：off();
     用法：
       例：$("button").off();  //如果不传递参数，会移除所有事件
           $("button").off("click");  //将所有click事件移除
	   $("button").off("click",test);  //如果传递两个参数，会移除指定类型的指定事件

18.jQuery的事件冒泡和默认行为（实例）
    1.什么是事件冒泡？
         子元素触发事件时连带着触发父元素等祖宗元素的事件。

    2.怎么阻止事件冒泡？
         第一种方法：
	     在子元素的事件函数结尾处写  return false;

         第二种方法：
	     在子元素的事件函数结尾处写  event.stopPropagation();  
	     //event为事件函数的形参
     
    3.什么是默认行为？
         有些元素自带默认的行为，比如a标签就自带点击后跳转到超链接的行为，这种行为就叫做默认行为。

    4.怎么阻止默认行为？
         第一种方法：
	     在事件函数结尾处写 return false;

         第二种方法：
	     在事件函数结尾处写  event.preventDefault();
             //event为事件函数的形参

19.jQuery的事件自动触发（实例）
      使用trigger()方法和triggerHandler方法
      用法：
        例如：$(".son").trigger("click");
	      $(".son").triggerHandler("click");

      相同点：二者都能自动触发事件。

      不同点：trigger方法会触发事件冒泡和默认行为，triggerHandler方法不会触发事件冒泡和默认行为。

      注意点（面试题）：a标签和其他标签有点不同，无法用trigger触发a标签的默认行为，
                        如果想用trigger触发a标签的默认行为的话，需要先用span标签将a标签中的文字包装起来，
	                然后用trigger去触发span的click，这样就能间接触发a标签的默认行为。

20.jQuery的自定义事件（实例）
      第一步：必须通过on(事件名,fn);的方式来定义事件。
      第二步：事件必须通过trigger或triggerHandler来触发。
              
21.事件的命名空间
      作用：jQuery可以给同一个对象添加多个甚至相同的事件，这个时候我们可以通过给事件设置名字来指定触发某个事件。

      第一步：用on的方式来绑定事件并给事件设置名字。
              例如：$(".son").on("click.名字",function(){    //给"这个"click事件设置一个名字，不会影响其使用
	                 alert("触发click事件");
	            });

      第二步：通过trigger或triggerHandler来触发事件。
              例如：$(".son").trigger("click.名字");

      注意点（面试题）：利用trigger触发子元素带命名空间的事件，那么父元素带相同命名空间的事件也会被触发，
                        而父元素没有命名空间的事件不会触发。
			利用trigger触发子元素不带命名空间的事件，那么子元素所有相同类型的事件和父元素所有
			相同类型的事件都会被触发。

22.事件委托（实例）
      1.是什么事件委托？
            请别人帮忙做事情，然后将做完的结果反馈给我们。
	    如果想给动态创建的元素添加事件，需要通过事件委托。
    
      2.语法：
           $("被委托的元素").delegate("发起委托的元素","委托的事件",事件函数);
	   例如：
	      $("ul").delegate("li","click",function(){   //将li的click事件委托给ul
                console.log($(this).html());
              });

23.鼠标移入移出事件（实例）
       1.鼠标移入事件：mouseenter
          例如：$(".father").mouseenter(function(){
                     console.log("移入了father");
                });

       2.鼠标移出事件：mouseleave
           例如：$(".father").mouseleave(function(){
                     console.log("移出了father");
                 });

       注意点：mouseenter和mouseleave相比于mouseover和mouseout,
               区别在于使用mouseeneter和mouseleave的情况下，子元素被移入或移出不会触发父元素的事件；
	       而mouseover和mouseout则会触发父元素的事件。
       
       3.使用以上两种事件属于分开监听移入和移出，而使用hover方法可以同时监听移入和移出。
             语法：对象.hover(移入函数，移出函数);
	     例如：$(".father").hover(
                          function(){
                             console.log("移入了father");
                          },
                          function(){
                             console.log("移出了father");
                          }
                   );
              //如果只接受一个函数，同样可以既监听移入又监听移出

24.Tab选项卡的制作（重点）
      看实例！

25.焦点图的制作（重点）
      看实例！

26.jQuery的显示和隐藏动画（实例）
     显示动画的方法：
         show(显示动画的毫秒数);
	 例如：$("div").show(1000);  //1000毫秒的显示动画
	 例如：$("div").show(1000,function(){alert("显示动画执行完毕")});   //毫秒数后可以传一个函数，该函数在动画结束后执行
 
     隐藏动画的方法：
         hide(隐藏动画的毫秒数);
	 例如：$("div").hide(1000);   //1000毫秒的隐藏动画
	 例如：$("div").hide(1000,function(){alert("隐藏动画执行完毕")});   //毫秒数后可以传一个函数，该函数在动画结束后执行

     切换动画的方法（图片如果隐藏了就将图片显示，如果显示了就将图片隐藏）：
         toggle(切换动画的毫秒);
	 例如：$("div").toggle(1000);
	 例如：$("div").toggle(1000,function(){alert("切换动画执行完毕")});

27.对联广告（重点）
      看实例！

28.jQuery的展开和收起动画（实例）
     显示动画的方法：
         slideDown(展开动画的毫秒数);
	 例如：$("div").slideDown(1000);  //1000毫秒的展开动画
	 例如：$("div").slideDown(1000,function(){alert("展开动画执行完毕")});   //毫秒数后可以传一个函数，该函数在动画结束后执行
 
     隐藏动画的方法：
         slideUp(收起动画的毫秒数);
	 例如：$("div").slideUp(1000);   //1000毫秒的收起动画
	 例如：$("div").SlideUp(1000,function(){alert("收起动画执行完毕")});   //毫秒数后可以传一个函数，该函数在动画结束后执行
     
     切换动画的方法（图片如果收起了就将图片显示，如果展开了就将图片隐藏）：
         slideToggle(切换动画的毫秒);
	 例如：$("div").slideToggle(1000);
	 例如：$("div").slideToggle(1000,function(){alert("切换动画执行完毕")});

29.下拉菜单（重点）
      具体看实例！

30.停止动画/防止动画自嗨（重点）
    每次执行动画之前，最好都先使用stop方法停止当前正在运行的动画，可以防止动画自嗨
      方法：stop()
      用法：需执行动画的对象.stop(true/false)    //参数可以不传，默认为false
      例如：var ch=$(this).children(".three");  /*获取需执行动画的对象*/
            ch.stop();  //stop方法停止当前正在运行的动画
            ch.slideDown(1000);

   详细用法：
      stop(false)/stop()/stop(false,false)【立即停止当前动画，继续执行后续的动画】

      stop(true)/stop(true,false)【立即停止当前和后续所有的动画】

      stop(false,true)【立即完成当前的，继续执行后续的动画】

      stop(true,true)【立即完成当前的，停止后续所有的动画】


31.淡入淡出动画
     淡入方法：fadeIn();
     用法：和展开等动画用法相同。

     淡出方法：fadeOut();
     用法：和收起等动画用法相同。

     切换方法：fadeToggle();
     用法：和之前的切换动画用法相同。

     淡入到：
         指的同样是淡入动画，但是可以控制淡入到什么程度。
	 方法：fadeTo();
	 用法：fadeTo(动画毫秒数,淡入程度,动画结束后执行的函数(可不写))。
	       例如：$("div").fadeTo(1000,0.5,function(){alert("淡入到原画的百分之50")});
	             //1000毫秒的动画，淡入程度为百分之50。

32.弹窗广告（重点）
     具体看实例！

33.自定义动画（实例）（重点）
     1. animate(可传4个参数);
       用法：animate({1},2,3,4);
       第一个参数：接收一个对象，可以在对象中修改属性。
       第二个参数：指定动画时长。
       第三个参数：指定动画节奏，默认为swing（慢->快->慢），可修改为linear（匀速），该参数可以不写。
       第四个参数：动画结束后执行的回调函数，该参数可以不写。

     2.关于关键字操作属性
        例如：$(".one").animate({
                    width:"hide"      //通过关键字操作属性（hide表示隐藏）
                },1000);

	关键字：
	    hide--隐藏
	    show--显示
	    toggle--切换

     注意点：如果第一个参数的对象中修改了多个属性，多个属性的动画也会同时执行。

34.动画延迟
     方法：delay(动画延迟的毫秒数)。
     用法：动画1;
           delay(2000);
	   动画2;
	   //执行完动画1后等两秒再执行动画2
     例如：$("div").show(1000).delay(2000).hide(1000);
           //先执行显示动画，等两秒后再执行隐藏动画

35.图标特效（重点）
      具体看实例
         
36.无限循环滚动（重点）
      具体看实例

37.内部插入节点的方法
      1.append()
        会将元素添加到指定元素内部的最后
	返回this
	例如：$("ul").append($("<li>新增的li</li>"));  //将li添加到ul内部的最后

      2.prepend()
        会将元素添加到指定元素内部的最前面
	返回this
	例如：$("ul").prepend($("<li>新增的li</li>"));   //将li添加到ul内部的最前面

      3.appendTo()
        用法和append方法作用相似，只是书写格式不一样
	和append的区别：传入的字符串参数可以当作选择器来处理,返回所有添加过的元素
	例如：$("<li>新增的li</li>").appendTo("ul");

      4.prependTo()
        用法和prepend方法作用相似，只是书写格式不一样
	和prepend的区别：传入的字符串参数可以当作选择器来处理,返回所有添加过的元素
        例如：$("<li>新增的li</li>").prependTo("ul");

38.外部插入节点的方法
      1.after()
        会将元素添加到指定元素外部的后面(紧跟指定元素)
	例如：$("ul").after($("<li>新增的li</li>"));  //将li添加到ul外部的后面，紧跟ul

      2.before()
        会将元素添加到指定元素外部的前面
	例如：$("ul").before($("<li>新增的li</li>"));  //将li添加到ul外部的前面

      3.insertAfter()
        用法和after方法作用相似，只是书写格式不一样
	例如：$("<li>新增的li</li>").insertAfter("ul");

      4.insertBefore()
        用法和before方法作用相似，只是书写格式不一样
	例如：$("<li>新增的li</li>").insertBefore("ul");

39.删除节点的方法
      1.remove()
        删除指定元素
	例如：$("div").remove();  //删除所有div
	例如：$("div").remove(".one");  //删除所有类名为"one"的div
	
      2.empty()
        删除指定元素的内容和子元素，指定元素自身不会被删除
	例如：$("div").empty();

      3.detach()
        用法和作用都和remove一样

40.替换节点的方法
      1.replaceWith()
        将所有匹配的元素替换为指定的元素
	例如：$("h1").replaceWith($("<h6>我是一个h6</h6>"));  //将所有h1替换为h6

      2.replaceAll()
        用法和replaceWith方法相同，只是书写格式不一样
	例如：$("<h6>我是一个h6</h6>").replaceAll("h1");

41.复制节点的方法
      1.浅复制一个元素
        方法：clone(false);
        浅复制只会复制一个元素，不会复制元素的事件
	例如：var cp=$("li:frist").clone(false);   //将列表中的第一个li浅复制并保存到cp中

      2.深复制一个元素
        方法：clone(true);
	深复制不仅会复制一个元素，还会复制该元素的事件
	例如：var cp=$("li:frist").clone(true);   //将列表中的第一个li深复制并保存到cp中

42.实例游戏：狂拍灰太狼
       具体见实例。

43.实例网页：qq音乐播放器
       具体见实例。



         
        
